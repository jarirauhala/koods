{"version":3,"sources":["kimonoJari.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","id","src","logo","alt","onClick","playClicked","cookie","Cookies","updateHeaderText","message","document","getElementById","innerHTML","updatePoints","playerPoints","get","counter","xhr","XMLHttpRequest","addEventListener","count","response","winnings","newPoints","set","registerWinnings","wholePath","window","location","href","open","send","event","console","log","path","expires","Date","now","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,wC,gLC2B5BC,MArBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQC,GAAG,cAAX,YAGA,0BAAMD,UAAU,YACd,yBAAKA,UAAU,QACb,uBAAGA,UAAU,gBAAb,2CACA,uBAAGA,UAAU,gBAAb,6CACA,yBAAKE,IAAKC,IAAMH,UAAU,WAAWI,IAAI,SACzC,4BAAQH,GAAG,aAAaI,QAASC,GAAjC,SAGA,uBAAGL,GAAG,qBAUVM,EAAS,I,KAAIC,GAEnB,SAASC,EAAiBC,GACxBC,SAASC,eAAe,cAAcC,UAAYH,EASpD,SAASI,IACP,IAAMC,EAAeR,EAAOS,IAAI,UAChCL,SAASC,eAAe,gBAAgBC,UAAY,WAAaE,EA0CnE,SAAST,IAIP,GAFmBC,EAAOS,IAAI,UAEX,EAAG,CAEpB,IAAIC,EAAU,KACVC,EAAM,IAAIC,eACdD,EAAIE,iBAAiB,QAAQ,WAE3B,IA/BkBC,EA8BlBJ,EAAUC,EAAII,SA9CpB,SAA0BC,GACxB,IACIC,EADYjB,EAAOS,IAAI,UACC,EAAIO,EAEhChB,EAAOkB,IAAI,SAAUD,GACrBV,IAEiB,IAAdU,IACDf,EAAiB,cACjBE,SAASC,eAAe,cAAcC,UAAY,MAuChDa,EAhCkBL,EA+BcJ,GA9BzB,MAAQ,GACjBR,EAAiB,uBACV,KAELY,EAAQ,MAAQ,GAClBZ,EAAiB,sBACV,IAENY,EAAQ,KAAO,GAChBZ,EAAiB,qBACV,IAGPA,EAAiB,YACV,OAoBP,IACMkB,EADMC,OAAOC,SAASC,KACJ,+BACxBZ,EAAIa,KAAK,MAAOJ,GAChBT,EAAIc,QAlERrB,SAASS,iBAAiB,oBAAoB,SAACa,GAC7CnB,OA0ECP,EAAOS,IAAI,WAAa,EACzBkB,QAAQC,IAAI,kCAAoC5B,EAAOS,IAAI,YAG3DkB,QAAQC,IAAI,2BAA6B5B,EAAOS,IAAI,WACpDT,EAAOkB,IAAI,SAAU,KAAM,CACzBW,KAAM,IACNC,QAAS,IAAIC,KAAKA,KAAKC,MAAM,UC3GbC,QACW,cAA7BZ,OAAOC,SAASY,UAEe,UAA7Bb,OAAOC,SAASY,UAEhBb,OAAOC,SAASY,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjC,SAASC,eAAe,SD6H3C,kBAAmBiC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAM1C,c","file":"static/js/main.c5e32d37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kimonoJari.d44cad0a.png\";","import React from 'react';\nimport logo from './kimonoJari.png';\nimport './App.css';\nimport Cookies from 'universal-cookie';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header id=\"App-header\">\n        Welcome!\n      </header>\n      <body className=\"App-body\">\n        <div className=\"keho\">\n          <p className=\"messageBoard\">This is Nappipeli made by Jari Rauhala.</p>\n          <p className=\"messageBoard\">And this is a picture of me in a kimono: </p>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <button id=\"playButton\" onClick={playClicked}>        \n            Play!\n          </button>\n          <p id=\"pointDisplay\"></p>\n        </div>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n\n// cookie holds the points for a player\nconst cookie = new Cookies();\n\nfunction updateHeaderText(message) {\n  document.getElementById(\"App-header\").innerHTML = message;\n}\n\n// updates points when the page is loaded\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  updatePoints();\n})\n\n// visualizes player's point count with information from cookie\nfunction updatePoints() {\n  const playerPoints = cookie.get('points');\n  document.getElementById(\"pointDisplay\").innerHTML = \"points: \" + playerPoints;\n}\n\n// updates the cookie after play\n// i.e. takes a point and adds winnings\nfunction registerWinnings(winnings) {\n  var oldPoints = cookie.get('points');\n  var newPoints = oldPoints - 1 + winnings;\n\n  cookie.set('points', newPoints);\n  updatePoints();\n\n  if(newPoints === 0) {\n    updateHeaderText(\"Game over!\")\n    document.getElementById(\"playButton\").innerHTML = \":(\";\n  }\n}\n\n// checks if the counter value provides the player any points\n// returns the points won if any\n// and 0 if not, obviously\nfunction assessWinnings(count) {\n  if(count % 250 === 0){\n    updateHeaderText(\"You won 250 points!\")\n    return 250;\n  }\n  if (count % 100 === 0) {\n    updateHeaderText(\"You won 40 points!\")\n    return 40;\n  }\n  if(count % 10 === 0) {\n    updateHeaderText(\"You won 5 points!\")\n    return 5;\n  }\n  else {\n    updateHeaderText(\"No luck!\")\n    return 0;\n  }\n}\n\n// called when clicked the play button\n// send a get request to /play to get the value of the counter\nfunction playClicked() {\n\n  var playerPoints = cookie.get('points');\n\n  if (playerPoints > 0) {\n\n    var counter = \"-1\";\n    var xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', () => {\n      counter = xhr.response;\n      const winnings = assessWinnings(counter);\n      registerWinnings(winnings);\n    })\n\n    const url = window.location.href;\n    const wholePath = url + 'secretpathforcounterfetching';  \n    xhr.open('GET', wholePath);\n    xhr.send();\n  }\n\n\n}\n\n// checks for cookes and creates new if none exists.\n// .get('points') returns undefined if points not set\n// i.e. cookie is not set\nif(cookie.get('points') >= 0) { \n  console.log(\"cookie exists already, points: \" + cookie.get('points'));\n}\nelse{\n  console.log(\"cookie NOT set, points: \" + cookie.get('points'));\n  cookie.set('points', '20', {\n    path: '/', \n    expires: new Date(Date.now()+86400)});\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}